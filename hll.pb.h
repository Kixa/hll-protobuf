// go:build exclude
// +build exclude

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hll.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hll_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hll_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hll_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hll_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hll_2eproto;
namespace kixa {
namespace hll {
class Sketch;
struct SketchDefaultTypeInternal;
extern SketchDefaultTypeInternal _Sketch_default_instance_;
}  // namespace hll
}  // namespace kixa
PROTOBUF_NAMESPACE_OPEN
template<> ::kixa::hll::Sketch* Arena::CreateMaybeMessage<::kixa::hll::Sketch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kixa {
namespace hll {

// ===================================================================

class Sketch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kixa.hll.Sketch) */ {
 public:
  inline Sketch() : Sketch(nullptr) {}
  ~Sketch() override;
  explicit constexpr Sketch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sketch(const Sketch& from);
  Sketch(Sketch&& from) noexcept
    : Sketch() {
    *this = ::std::move(from);
  }

  inline Sketch& operator=(const Sketch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sketch& operator=(Sketch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sketch& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sketch* internal_default_instance() {
    return reinterpret_cast<const Sketch*>(
               &_Sketch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sketch& a, Sketch& b) {
    a.Swap(&b);
  }
  inline void Swap(Sketch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sketch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sketch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sketch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sketch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sketch& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sketch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kixa.hll.Sketch";
  }
  protected:
  explicit Sketch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegistersFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // repeated uint32 registers = 2;
  int registers_size() const;
  private:
  int _internal_registers_size() const;
  public:
  void clear_registers();
  private:
  uint32_t _internal_registers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_registers() const;
  void _internal_add_registers(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_registers();
  public:
  uint32_t registers(int index) const;
  void set_registers(int index, uint32_t value);
  void add_registers(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      registers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_registers();

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:kixa.hll.Sketch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > registers_;
  mutable std::atomic<int> _registers_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hll_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sketch

// string version = 1;
inline void Sketch::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Sketch::version() const {
  // @@protoc_insertion_point(field_get:kixa.hll.Sketch.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sketch::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kixa.hll.Sketch.version)
}
inline std::string* Sketch::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:kixa.hll.Sketch.version)
  return _s;
}
inline const std::string& Sketch::_internal_version() const {
  return version_.Get();
}
inline void Sketch::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Sketch::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Sketch::release_version() {
  // @@protoc_insertion_point(field_release:kixa.hll.Sketch.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Sketch::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kixa.hll.Sketch.version)
}

// repeated uint32 registers = 2;
inline int Sketch::_internal_registers_size() const {
  return registers_.size();
}
inline int Sketch::registers_size() const {
  return _internal_registers_size();
}
inline void Sketch::clear_registers() {
  registers_.Clear();
}
inline uint32_t Sketch::_internal_registers(int index) const {
  return registers_.Get(index);
}
inline uint32_t Sketch::registers(int index) const {
  // @@protoc_insertion_point(field_get:kixa.hll.Sketch.registers)
  return _internal_registers(index);
}
inline void Sketch::set_registers(int index, uint32_t value) {
  registers_.Set(index, value);
  // @@protoc_insertion_point(field_set:kixa.hll.Sketch.registers)
}
inline void Sketch::_internal_add_registers(uint32_t value) {
  registers_.Add(value);
}
inline void Sketch::add_registers(uint32_t value) {
  _internal_add_registers(value);
  // @@protoc_insertion_point(field_add:kixa.hll.Sketch.registers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Sketch::_internal_registers() const {
  return registers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Sketch::registers() const {
  // @@protoc_insertion_point(field_list:kixa.hll.Sketch.registers)
  return _internal_registers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Sketch::_internal_mutable_registers() {
  return &registers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Sketch::mutable_registers() {
  // @@protoc_insertion_point(field_mutable_list:kixa.hll.Sketch.registers)
  return _internal_mutable_registers();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hll
}  // namespace kixa

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hll_2eproto
